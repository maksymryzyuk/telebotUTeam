from aiogram import F, Router
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from database.requests import *

router = Router()

class Reg(StatesGroup):
    lastname = State()
    firstname = State()
    number = State()
    password = State()

class Login(StatesGroup):
    number = State()
    password = State()

class TopUp(StatesGroup):
    amount = State()

class SelectTariff(StatesGroup):
    tariff = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–í—ñ—Ç–∞—î–º–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /help –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è!", reply_markup=kb.main)

@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer("–û—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/login - –í—Ö—ñ–¥\n/reg - –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")

@router.message(F.text == "üìù –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è")
@router.message(Command('reg'))
async def reg_start(message: Message, state: FSMContext):
    await state.set_state(Reg.lastname)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ:", reply_markup=ReplyKeyboardRemove())

@router.message(Reg.lastname)
async def reg_lastname(message: Message, state: FSMContext):
    await state.update_data(lastname=message.text)
    await state.set_state(Reg.firstname)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è:")

@router.message(Reg.firstname)
async def reg_firstname(message: Message, state: FSMContext):
    await state.update_data(firstname=message.text)
    await state.set_state(Reg.number)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

@router.message(Reg.number)
async def reg_number(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    await state.set_state(Reg.password)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:")

@router.message(Reg.password)
async def reg_password(message: Message, state: FSMContext):
    data = await state.get_data()
    await add_user(message.from_user.id, data["lastname"], data["firstname"], data["number"], message.text)
    await message.answer("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!", reply_markup=kb.main)
    await state.clear()

@router.message(F.text == "üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è")
@router.message(Command('login'))
async def login_start(message: Message, state: FSMContext):
    await state.set_state(Login.number)
    await message.answer("üì≤ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

@router.message(Login.number)
async def login_number(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    await state.set_state(Login.password)
    await message.answer("üîë –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:")

@router.message(Login.password)
async def login_password(message: Message, state: FSMContext):
    data = await state.get_data()
    user = await get_user_by_number(data["number"])
    if user and user.password == message.text:
        await message.answer(f"‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π! –í—ñ—Ç–∞—î–º–æ, {user.firstname}!", reply_markup=kb.user_menu)
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∞–±–æ –ø–∞—Ä–æ–ª—å.")

@router.message(F.text == "üí∞ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±–∞–ª–∞–Ω—Å")
async def view_balance(message: Message):
    user = await get_user_by_id(message.from_user.id)

    if user:
        tariff_name = user.tariff
        balance = user.balance if user.balance is not None else 0
        await message.answer(f"üìú –í–∞—à —Ç–∞—Ä–∏—Ñ: {tariff_name}\nüí≥ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} –≥—Ä–Ω.",
                             reply_markup=kb.balance_menu)
    else:
        await message.answer("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É. –í–∏–∫–æ–Ω–∞–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∞–±–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.")

@router.message(F.text == "üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å")
async def top_up_start(message: Message, state: FSMContext):
    await state.set_state(TopUp.amount)
    await message.answer("üí≥ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:")

@router.message(TopUp.amount)
async def top_up_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        new_balance = await update_balance(message.from_user.id, amount)
        await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–≤–Ω–µ–Ω–æ. –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} –≥—Ä–Ω.", reply_markup=kb.balance_menu)
        await state.clear()
    except:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏.")

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_user_menu(message: Message):
    await message.answer("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é", reply_markup=kb.user_menu)

@router.message(F.text == "üìú –¢–∞—Ä–∏—Ñ–∏")
async def show_tariffs(message: Message):
    await message.answer("üìú –û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:", reply_markup=kb.tariff_menu)

@router.callback_query(F.data.startswith("tariff_"))
async def tariff_selected(callback: CallbackQuery, state: FSMContext):
    tariffs_info = {
        "tariff_100": ("–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç 100 –ú–±—ñ—Ç/—Å", 150),
        "tariff_200": ("–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç 200 –ú–±—ñ—Ç/—Å", 200),
        "tariff_500": ("–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç 500 –ú–±—ñ—Ç/—Å", 300),
        "tariff_100_tv": ("–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç 100 –ú–±—ñ—Ç/—Å + –¢–µ–ª–µ–±–∞—á–µ–Ω–Ω—è", 250),
        "tariff_500_tv": ("–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç 500 –ú–±—ñ—Ç/—Å + –¢–µ–ª–µ–±–∞—á–µ–Ω–Ω—è", 400),
    }

    tariff_data = tariffs_info.get(callback.data)
    if tariff_data:
        tariff_name, tariff_price = tariff_data
        await callback.message.answer(
            f"üìú <b>{tariff_name}</b>\nüíµ <b>–¶—ñ–Ω–∞:</b> {tariff_price} –≥—Ä–Ω/–º—ñ—Å\n‚úÖ –û–±—Ä–∞—Ç–∏ —Ü–µ–π —Ç–∞—Ä–∏—Ñ?",
            parse_mode="HTML",
            reply_markup=kb.tariff_reply_menu
        )
        await callback.answer()
        await state.update_data(selected_tariff=(tariff_name, tariff_price))
    else:
        await callback.message.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∞—Ä–∏—Ñ.")
        await callback.answer()

@router.message(F.text == "‚úÖ –û–±—Ä–∞—Ç–∏")
async def confirm_tariff(message: Message, state: FSMContext):
    user = await get_user_by_id(message.from_user.id)

    if user:
        data = await state.get_data()
        selected_tariff = data.get("selected_tariff")

        if selected_tariff:
            tariff_name, tariff_price = selected_tariff
            user.tariff = tariff_name  # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞—Ä–∏—Ñ —É –±–∞–∑—ñ
            await update_balance(user.telegram_id, -tariff_price)  # –í—ñ–¥–Ω—ñ–º–∞—î–º–æ —Å—É–º—É –∑ –±–∞–ª–∞–Ω—Å—É
            await update_tariff(user.telegram_id, tariff_name)  # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞—Ä–∏—Ñ —É –±–∞–∑—ñ

            await message.answer(f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: {tariff_name}.\nüíµ –ú—ñ—Å—è—á–Ω–∞ –ø–ª–∞—Ç–∞: {tariff_price} –≥—Ä–Ω.",
                                 reply_markup=kb.user_menu)
            await state.clear()
        else:
            await message.answer("‚ùå –í–∏ —â–µ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ.")
    else:
        await message.answer("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É. –í–∏–∫–æ–Ω–∞–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∞–±–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.")

@router.message(F.text == "üõ† –Ü–Ω—à—ñ –ø–æ—Å–ª—É–≥–∏")
async def other_services(message: Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:", reply_markup=kb.services_menu)

@router.message(F.text == "üì° –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
async def connection_services(message: Message):
    user = await get_user_by_id(message.from_user.id)
    request = await get_request_by_user(user.id)

    if request:
        await message.answer("üì° –í–∏ –≤–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.\n‚ùå –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –≤–∏ –º–æ–∂–µ—Ç–µ —ó—ó –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏.",
                             reply_markup=kb.cancel_request_menu)
    else:
        await message.answer("üì° –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.", reply_markup=kb.connection_menu)

@router.message(F.text == "üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
async def leave_request(message: Message):
    user = await get_user_by_id(message.from_user.id)

    if not await get_request_by_user(user.id):
        queue_number = (await get_request_by_user(user.id)) or 1
        await add_request(user.id, queue_number)

        await message.answer(f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞!\nüìå –í–∞—à –Ω–æ–º–µ—Ä —É —á–µ—Ä–∑—ñ: {queue_number}",
                             reply_markup=kb.cancel_request_menu)
    else:
        await message.answer("‚ùå –í–∏ –≤–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É!", reply_markup=kb.cancel_request_menu)

@router.message(F.text == "‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞—è–≤–∫—É")
async def cancel_request(message: Message):
    user = await get_user_by_id(message.from_user.id)
    request = await get_request_by_user(user.id)

    if request:
        await delete_request(user.id)
        await message.answer("‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.", reply_markup=kb.connection_menu)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞—è–≤–∫–∏.", reply_markup=kb.connection_menu)

@router.message(F.text == "üö™ –í–∏–π—Ç–∏ –∑ –∫–∞–±—ñ–Ω–µ—Ç—É")
async def logout(message: Message):
    await message.answer("üö™ –í–∏ –≤–∏–π—à–ª–∏ –∑ –∫–∞–±—ñ–Ω–µ—Ç—É.", reply_markup=kb.main)